/*
 * Jugador.c
 *
 *  Created on: 19 oct. 2022
 *      Author: Facu
 */


#include "Jugador.h"
#include "utn.h"

/**
 * Funcin que autoincrementa el ID
 */
int idAutomatico = 1;
int Jugador_ObtenerIdUnico(void) {
	return idAutomatico++;
}




/**
 * @brief Funcion que imprime un solo Jugador
 * @param arrayJugador: arrayJugador de listado de Jugadors
 */
void Jugador_imprimirUno(Jugador arrayJugador) {
	printf("---------------------------");
	printf("\nID: %d\n",arrayJugador.id);
	printf("ID_AUTOR: %d\n",arrayJugador.idAutor);
	printf("ID_EDITORIAL: %d\n", arrayJugador.idEditorial);
	printf("Titulo: %s\n",arrayJugador.titulo);
	printf("Precio: $%.2f\n",arrayJugador.precio);
	printf("Fecha de publicacion: %d/%d/%d\n",arrayJugador.fechaPublicacion.dia, arrayJugador.fechaPublicacion.mes, arrayJugador.fechaPublicacion.anio);
	printf("---------------------------");
	printf("---------------------------\n\n");
}

/**
 * @brief Funcion que imprime todos los Jugadors
 * @param arrayJugador: arrayJugador de Jugadors
 * @param size: longitud del arrayJugador
 * @return Retorna 0 caso Exito! (-1) Error!
 */
int Jugador_imprimirTodos(Jugador arrayJugador[], int size) {
	int rtn = -1;
	int i;

	if (arrayJugador != NULL && size > 0) {
			//ESTA TODO BIEN
			for (i = 0; i < size; i++) {
				if (arrayJugador[i].status == OCUPADO) { //Si 'estado' == OCUPADO
					Jugador_imprimirUno(arrayJugador[i]);
					rtn = 0; //Ok
				}
			}
	}

	return rtn;
}

/***
 * Funcion para inicializar el status del array en 0
 * @param arrayJugador
 * @param size
 * @return retorna 1 caso Exito, 0 en caso de Error
 *  */
int Jugador_initArrayJugador(Jugador *arrayJugador,int size){
	int i;
	int retorno = -1;
	if(size > 0)
	{

		for(i=0;i<size;i++)
		{
			arrayJugador[i].status = LIBRE;

		}
		retorno = 0;
	}
	return retorno;
}

/**
 * Funcion que busca un lugar libre en el array
 * @param arrayJugador
 * @param size
 * @return retorna el index del array que esta libre, -1 en caso de error
 */
int Jugador_buscarLugarLibre(Jugador *arrayJugador,int size){
	int index = -1;
	int i;
	if(size > 0)
	{
		index = 0;
		for(i=0;i<size;i++)
		{
			if(arrayJugador[i].status == LIBRE)
			{
				index = i;
				break;
			}
		}

	}
	return index;
}

/**
 * Funcion que busca un ID pasado por parametro
 * @param arrayJugador
 * @param size
 * @param id: ID a buscar
 * @return retorno el indice donde se encuentra el id a buscar, -1 en caso de error
 */
int Jugador_buscarPorIdParametro(Jugador *arrayJugador, int size, int id){
	int rtn = -1;
	int i;

	if (size > 0) {
		for (i = 0; i < size; i++) {
			if (arrayJugador[i].id == id && arrayJugador[i].status == OCUPADO) {
				rtn = i;
				break;
			}
		}
	}

	return rtn;
}

/**
 * Funcion para dar de ALTA un Jugador
 * @param arrayJugador
 * @param size
 * @param indice: posicion del array donde se va a dar de alta
 * @param arrayEditoriales
 * @param arrayAutores
 * @param sizeEntities
 * @return retorna 0 en caso de exito, o -1 en caso de error
 */
int Jugador_addJugador(Jugador *arrayJugador,int size,int indice){
	int retorno = -1;
	int idAutor;
	int idEditorial;
	int i;
	Jugador bufferJugador;

	if(size > 0 && indice < size && indice >= 0){
		if(utn_getDescripcion(bufferJugador.titulo, MAX_CHARS, "\nIngrese nombre del Jugador: ", "\nError! Ingrese un nombre", 2) == 0){

			strncpy(bufferJugador.titulo, strlwr(bufferJugador.titulo), MAX_CHARS);
			bufferJugador.titulo[0] = toupper(bufferJugador.titulo[0]);
			for(i=0; i<size; i++){
				if(bufferJugador.titulo[i] == ' '){
					bufferJugador.titulo[i + 1] = toupper(bufferJugador.titulo[i + 1]);
				}
			}

			//IMPRIMIR ARRAY AUTORES, EDITORIALES Y PAISES

			//imprimir array autores
			printf("\nSeleccione el ID del autor al que pertenece el Jugador\n");
			for(i = 0; i<sizeEntities; i++){
				printf("\nID: %d\nNombre:%s", arrayAutores[i].id, arrayAutores[i].nombre);
			}
			if(utn_getNumero(&idAutor, "\nIngrese el ID del autor", "\nError. Ingrese un numero.\n", 1, 5, 2) == 0){
				printf("\nSeleccione el ID de la editorial a la que pertenece el Jugador\n");
				for(i = 0; i<sizeEntities; i++){
					printf("\nID: %d\nDescripcion:%s", arrayEditoriales[i].id, arrayEditoriales[i].descripcion);
				}
				if(utn_getNumero(&idEditorial, "\n\nIngrese el ID de la editorial ", "\nError. Ingrese un numero.\n", 1, 5, 2) == 0 &&
				   utn_getNumeroFlotante(&bufferJugador.precio, "\nIngrese precio: ", "\nError! Ingrese un numero", 10, 10000000, 2)== 0 &&
				   utn_getNumero(&bufferJugador.fechaPublicacion.dia, "\nIngrese fecha de publicacion(Numerica)\nDia: ", "\nError! Ingrese un numero: ", 1, 31, 2) == 0 &&
				   utn_getNumero(&bufferJugador.fechaPublicacion.mes, "\nMes: ", "\nError! Ingrese un numero: ", 1, 12, 2) == 0 &&
				   utn_getNumero(&bufferJugador.fechaPublicacion.anio, "Anio: ", "\nError! Ingrese un numero: ", 1800, 2022, 2) == 0 ){
				   bufferJugador.id = Jugador_ObtenerIdUnico();
				   bufferJugador.idAutor = idAutor;
				   bufferJugador.idEditorial = idEditorial;
				   bufferJugador.status = 1;
				   arrayJugador[indice] = bufferJugador;
				   Jugador_imprimirUno(arrayJugador[indice]);
				   retorno = 0;
				}
			}
		}
	}
	return retorno;
}

/**
 * Funcion para dar de BAJA un Jugador
 * @param arrayJugador
 * @param size
 * @return retorna 0 caso exito, 0 -1 en caso de error
 */
int Jugador_bajaJugador(Jugador *arrayJugador, int size){
	int retorno = -1;
	int idBaja;
	int index;
	int confirma;

	if(size > 0){
		if(utn_getNumero(&idBaja, "\nIngrese ID del Jugador a eliminar: ", "\nError! Ingrese un numero: ", 1, 100, 3) == 0){
			while (Jugador_buscarPorIdParametro(arrayJugador, size, idBaja) == -1) {
				printf("NO EXISTE ID.");
				printf("INGRESE ID A DAR DE BAJA: ");
				utn_getNumero(&idBaja, "\nIngrese ID del Jugador a eliminar: ", "\nError! Ingrese un numero: ", 1, 100, 3);
			}
			index = Jugador_buscarPorIdParametro(arrayJugador, size, idBaja);
			if(utn_getNumero(&confirma, "\nEsta seguro que desea continuar con la eliminacion? [1-SI]-[0-NO]", "\nError! Ingrese un numero", 0, 1, 3) == 0){
				if(confirma){
					arrayJugador[index].status = LIBRE;

					//Baja Exitosa
					retorno = 0;
				}else {
					printf("Se ha cancelado el proceso de eliminacion");
				}
			}
		}
	}

	return retorno;
}

/**
 * Funcion para modificar Jugadors
 * @param arrayJugador
 * @param size
 * @param arrayEditoriales
 * @param arrayAutores
 * @param sizeEntities
 * @return
 */
int Jugador_modificar(Jugador *arrayJugador,int size){

	int retorno = -1;
	int idAux;
	int index;
	Jugador auxJugador;

		index = Jugador_buscarJugadorPorId(arrayJugador, size);
		if(index > -1 && size > 0){
			auxJugador = arrayJugador[index];

			auxJugador = Jugador_modificarUnJugador(auxJugador);

			arrayJugador[index] = auxJugador;
			retorno = 0;
		}

	return retorno;
}

/**
 * Funcion que modifica UN Jugador del array
 * @param Jugador
 * @param arrayEditoriales
 * @param arrayAutores
 * @param sizeEntities
 * @return retorna el Jugador
 */
Jugador Jugador_modificarUnJugador(Jugador Jugador){
	int opcion;
		if(utn_getNumero(&opcion, "\nIngrese la opcion de lo que desea modificar\n"
								"1.Titulo\n"
								"2.Precio\n"
								"3.Fecha de publicacion\n"
								"4.Autor\n"
								"5.Editorial\n"
								"7.Todos los datos\n"
								"\n0.CANCELAR Modificacion\n", "Opcion no habilitada", 0, 6, 2) == 0){



		switch (opcion) {
		case 0:
			printf("Modificacion Cancelada\n");
			break;
		case 1:
			utn_getDescripcion(Jugador.titulo, MAX_CHARS, "\nIngrese titulo del Jugador", "error\n", 2);
			break;
		case 2:
			utn_getNumeroFlotante(&Jugador.precio, "Ingrese precio: ", "\nError! Ingrese un precio: ", 10, 1000000, 2);
			break;



		case 6:
			utn_getDescripcion(Jugador.titulo, MAX_CHARS, "\nIngrese el titulo", "error\n", 2);
			utn_getNumeroFlotante(&Jugador.precio, "Ingrese precio: ", "\nError! Ingrese un precio: ", 10, 1000000, 2);


			break;
		default:
			printf("Opcion ingresada invalida!\n\n");
			break;
		}
		}else{
			printf("\nError en la modificacion.\n");
		}
		return Jugador;
}

/**
 * Busca Jugador por ID
 * @param arrayJugador
 * @param size
 * @return retorna 0 caso exitoso, o -1 en caso de Error
 */
int Jugador_buscarJugadorPorId(Jugador *arrayJugador, int size){
	int rtn = -1;
	int flag = 0;
	int i;
	int buscarID;

	if (size > 0) {

		Jugador_imprimirTodos(arrayJugador, size);

		//PEDIR UN ID
		if(utn_getNumero(&buscarID, "\nIngrese ID: ", "Error! ID incorrecto.\nVuelva  a intentarlo\n", 0, 100, 2) == 0){
			for (i = 0; i < size; i++) {
				if (arrayJugador[i].status == OCUPADO && arrayJugador[i].id == buscarID) {
					flag = 1;
					rtn = i; //retorno index del ID que estoy buscando
					break;

				}
			}
		}
		if (flag == 0) { //Si no encontre ID...
			rtn = -2;
		}

	}
	return rtn;
}
